--- src/include/OSL/llvm_util.h
+++ src/include/OSL/llvm_util.h
@@ -43,7 +43,10 @@
   class ExecutionEngine;
   class Function;
   class FunctionType;
-  class JITMemoryManager;
+namespace object {
+  class ObjectFile;
+}
+  class RTDyldMemoryManager;
   class Linker;
   class LLVMContext;
   class Module;
@@ -52,28 +55,18 @@
   class Value;
   template<bool preserveNames, typename T, typename Inserter> class IRBuilder;
   template<bool preserveNames> class IRBuilderDefaultInserter;
-#if OSL_LLVM_VERSION >= 34
   namespace legacy {
     class FunctionPassManager;
     class PassManager;
   }
-#else
-  class FunctionPassManager;
-  class PassManager;
-#endif
 }
 
-
-
 OSL_NAMESPACE_ENTER
 
 namespace pvt {   // OSL::pvt
 
-
 class OSL_Dummy_JITMemoryManager;
 
-
-
 /// Wrapper class around LLVM functionality.  This handles all the
 /// gory details of actually dealing with LLVM.  It should be sufficiently
 /// generic that it would be useful for any LLVM-JITing app, and is not
@@ -233,7 +226,6 @@
     /// Return the basic block of the current loop's exit point.
     llvm::BasicBlock *loop_after_block () const;
 
-
     llvm::Type *type_float() const { return m_llvm_type_float; }
     llvm::Type *type_int() const { return m_llvm_type_int; }
     llvm::Type *type_addrint() const { return m_llvm_type_addrint; }
@@ -508,12 +500,10 @@
 
     std::string func_name (llvm::Function *f);
 
-    static size_t total_jit_memory_held ();
-
 private:
     /// Return a pointer to the JIT memory manager.
-    llvm::JITMemoryManager *jitmm () const {
-        return (llvm::JITMemoryManager *)m_llvm_jitmm;
+    llvm::RTDyldMemoryManager *jitmm () const {
+        return (llvm::RTDyldMemoryManager*) m_llvm_jitmm;
     }
 
     void SetupLLVM ();
@@ -524,16 +514,12 @@
     PerThreadInfo *m_thread;
     llvm::LLVMContext *m_llvm_context;
     llvm::Module *m_llvm_module;
+
     IRBuilder *m_builder;
     OSL_Dummy_JITMemoryManager *m_llvm_jitmm;
     llvm::Function *m_current_function;
-#if OSL_LLVM_VERSION >= 34
     llvm::legacy::PassManager *m_llvm_module_passes;
     llvm::legacy::FunctionPassManager *m_llvm_func_passes;
-#else
-    llvm::PassManager *m_llvm_module_passes;
-    llvm::FunctionPassManager *m_llvm_func_passes;
-#endif
     llvm::ExecutionEngine *m_llvm_exec;
     std::vector<llvm::BasicBlock *> m_return_block;     // stack for func call
     std::vector<llvm::BasicBlock *> m_loop_after_block; // stack for break
@@ -558,7 +544,5 @@
 
 };
 
-
-
 }; // namespace pvt
 OSL_NAMESPACE_EXIT
